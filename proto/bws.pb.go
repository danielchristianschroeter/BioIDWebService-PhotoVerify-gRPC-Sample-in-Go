// Copyright 2024 BioID GmbH.
// Specification of the BioID Web Service (BWS) API.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.2
// source: bws.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Possible returned job status values.
type JobStatus int32

const (
	// The job finished successfully.
	JobStatus_SUCCEEDED JobStatus = 0
	// The job has been aborted due to one or more errors.
	JobStatus_FAULTED JobStatus = 1
	// The job has been cancelled.
	JobStatus_CANCELLED JobStatus = 2
)

// Enum value maps for JobStatus.
var (
	JobStatus_name = map[int32]string{
		0: "SUCCEEDED",
		1: "FAULTED",
		2: "CANCELLED",
	}
	JobStatus_value = map[string]int32{
		"SUCCEEDED": 0,
		"FAULTED":   1,
		"CANCELLED": 2,
	}
)

func (x JobStatus) Enum() *JobStatus {
	p := new(JobStatus)
	*p = x
	return p
}

func (x JobStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JobStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_bws_proto_enumTypes[0].Descriptor()
}

func (JobStatus) Type() protoreflect.EnumType {
	return &file_bws_proto_enumTypes[0]
}

func (x JobStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JobStatus.Descriptor instead.
func (JobStatus) EnumDescriptor() ([]byte, []int) {
	return file_bws_proto_rawDescGZIP(), []int{0}
}

// Verification accuracy levels.
// We recommend not to accept verified persons with low verification levels.
type PhotoVerifyResponse_AccuracyLevel int32

const (
	// The person has not be recognized at all.
	PhotoVerifyResponse_NOT_RECOGNIZED PhotoVerifyResponse_AccuracyLevel = 0
	// Worst accuracy level that correlates with a FAR of 0.5%
	PhotoVerifyResponse_LEVEL_1 PhotoVerifyResponse_AccuracyLevel = 1
	// Bad accuracy level that correlates with a FAR of 0.25%
	PhotoVerifyResponse_LEVEL_2 PhotoVerifyResponse_AccuracyLevel = 2
	// Not so good accuracy level that correlates with a FAR of 0.1%
	PhotoVerifyResponse_LEVEL_3 PhotoVerifyResponse_AccuracyLevel = 3
	// Good accuracy level that correlates with a FAR of 0.01%
	PhotoVerifyResponse_LEVEL_4 PhotoVerifyResponse_AccuracyLevel = 4
	// Best accuracy level that correlates with a FAR of 0.001%
	PhotoVerifyResponse_LEVEL_5 PhotoVerifyResponse_AccuracyLevel = 5
)

// Enum value maps for PhotoVerifyResponse_AccuracyLevel.
var (
	PhotoVerifyResponse_AccuracyLevel_name = map[int32]string{
		0: "NOT_RECOGNIZED",
		1: "LEVEL_1",
		2: "LEVEL_2",
		3: "LEVEL_3",
		4: "LEVEL_4",
		5: "LEVEL_5",
	}
	PhotoVerifyResponse_AccuracyLevel_value = map[string]int32{
		"NOT_RECOGNIZED": 0,
		"LEVEL_1":        1,
		"LEVEL_2":        2,
		"LEVEL_3":        3,
		"LEVEL_4":        4,
		"LEVEL_5":        5,
	}
)

func (x PhotoVerifyResponse_AccuracyLevel) Enum() *PhotoVerifyResponse_AccuracyLevel {
	p := new(PhotoVerifyResponse_AccuracyLevel)
	*p = x
	return p
}

func (x PhotoVerifyResponse_AccuracyLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PhotoVerifyResponse_AccuracyLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_bws_proto_enumTypes[1].Descriptor()
}

func (PhotoVerifyResponse_AccuracyLevel) Type() protoreflect.EnumType {
	return &file_bws_proto_enumTypes[1]
}

func (x PhotoVerifyResponse_AccuracyLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PhotoVerifyResponse_AccuracyLevel.Descriptor instead.
func (PhotoVerifyResponse_AccuracyLevel) EnumDescriptor() ([]byte, []int) {
	return file_bws_proto_rawDescGZIP(), []int{3, 0}
}

// Liveness detection input images.
type LivenessDetectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The input image samples.
	LiveImages []*ImageData `protobuf:"bytes,1,rep,name=live_images,json=liveImages,proto3" json:"live_images,omitempty"`
}

func (x *LivenessDetectionRequest) Reset() {
	*x = LivenessDetectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bws_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LivenessDetectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LivenessDetectionRequest) ProtoMessage() {}

func (x *LivenessDetectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bws_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LivenessDetectionRequest.ProtoReflect.Descriptor instead.
func (*LivenessDetectionRequest) Descriptor() ([]byte, []int) {
	return file_bws_proto_rawDescGZIP(), []int{0}
}

func (x *LivenessDetectionRequest) GetLiveImages() []*ImageData {
	if x != nil {
		return x.LiveImages
	}
	return nil
}

// Liveness detection output.
type LivenessDetectionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The return-status of the processing job.
	Status JobStatus `protobuf:"varint,1,opt,name=status,proto3,enum=bioid.services.v1.JobStatus" json:"status,omitempty"`
	// Any error messages collected during processing.
	Errors []*JobError `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
	// Calculated image properties for each of the provided images in the given order.
	ImageProperties []*ImageProperties `protobuf:"bytes,3,rep,name=image_properties,json=imageProperties,proto3" json:"image_properties,omitempty"`
	// The liveness decision.
	Live bool `protobuf:"varint,4,opt,name=live,proto3" json:"live,omitempty"`
	// The calculated liveness score that led to the live decision.
	LivenessScore float64 `protobuf:"fixed64,5,opt,name=liveness_score,json=livenessScore,proto3" json:"liveness_score,omitempty"`
}

func (x *LivenessDetectionResponse) Reset() {
	*x = LivenessDetectionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bws_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LivenessDetectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LivenessDetectionResponse) ProtoMessage() {}

func (x *LivenessDetectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bws_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LivenessDetectionResponse.ProtoReflect.Descriptor instead.
func (*LivenessDetectionResponse) Descriptor() ([]byte, []int) {
	return file_bws_proto_rawDescGZIP(), []int{1}
}

func (x *LivenessDetectionResponse) GetStatus() JobStatus {
	if x != nil {
		return x.Status
	}
	return JobStatus_SUCCEEDED
}

func (x *LivenessDetectionResponse) GetErrors() []*JobError {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *LivenessDetectionResponse) GetImageProperties() []*ImageProperties {
	if x != nil {
		return x.ImageProperties
	}
	return nil
}

func (x *LivenessDetectionResponse) GetLive() bool {
	if x != nil {
		return x.Live
	}
	return false
}

func (x *LivenessDetectionResponse) GetLivenessScore() float64 {
	if x != nil {
		return x.LivenessScore
	}
	return 0
}

// Photo-verification input images and flags.
type PhotoVerifyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// One or more live images.
	LiveImages []*ImageData `protobuf:"bytes,1,rep,name=live_images,json=liveImages,proto3" json:"live_images,omitempty"`
	// The ID-photo image.
	Photo []byte `protobuf:"bytes,2,opt,name=photo,proto3" json:"photo,omitempty"`
	// Flag to switch off LivenessDetection which is enabled by default.
	DisableLivenessDetection bool `protobuf:"varint,3,opt,name=disable_liveness_detection,json=disableLivenessDetection,proto3" json:"disable_liveness_detection,omitempty"`
}

func (x *PhotoVerifyRequest) Reset() {
	*x = PhotoVerifyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bws_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhotoVerifyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhotoVerifyRequest) ProtoMessage() {}

func (x *PhotoVerifyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bws_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhotoVerifyRequest.ProtoReflect.Descriptor instead.
func (*PhotoVerifyRequest) Descriptor() ([]byte, []int) {
	return file_bws_proto_rawDescGZIP(), []int{2}
}

func (x *PhotoVerifyRequest) GetLiveImages() []*ImageData {
	if x != nil {
		return x.LiveImages
	}
	return nil
}

func (x *PhotoVerifyRequest) GetPhoto() []byte {
	if x != nil {
		return x.Photo
	}
	return nil
}

func (x *PhotoVerifyRequest) GetDisableLivenessDetection() bool {
	if x != nil {
		return x.DisableLivenessDetection
	}
	return false
}

// Photo-verification output.
type PhotoVerifyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The return-status of the processing job.
	Status JobStatus `protobuf:"varint,1,opt,name=status,proto3,enum=bioid.services.v1.JobStatus" json:"status,omitempty"`
	// Any error messages collected during processing.
	Errors []*JobError `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
	// Calculated image properties for each of the provided live images if available.
	ImageProperties []*ImageProperties `protobuf:"bytes,3,rep,name=image_properties,json=imageProperties,proto3" json:"image_properties,omitempty"`
	// Calculated image properties for the provided photo.
	PhotoProperties *ImageProperties `protobuf:"bytes,4,opt,name=photo_properties,json=photoProperties,proto3" json:"photo_properties,omitempty"`
	// The determined verification level.
	VerificationLevel PhotoVerifyResponse_AccuracyLevel `protobuf:"varint,5,opt,name=verification_level,json=verificationLevel,proto3,enum=bioid.services.v1.PhotoVerifyResponse_AccuracyLevel" json:"verification_level,omitempty"`
	// The calculated verification score that led to the decision for the verification level.
	VerificationScore float64 `protobuf:"fixed64,6,opt,name=verification_score,json=verificationScore,proto3" json:"verification_score,omitempty"`
	// In case a liveness detection was performed, here is the liveness decision.
	Live bool `protobuf:"varint,7,opt,name=live,proto3" json:"live,omitempty"`
	// The calculated liveness score that led to the live decision.
	LivenessScore float64 `protobuf:"fixed64,8,opt,name=liveness_score,json=livenessScore,proto3" json:"liveness_score,omitempty"`
}

func (x *PhotoVerifyResponse) Reset() {
	*x = PhotoVerifyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bws_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhotoVerifyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhotoVerifyResponse) ProtoMessage() {}

func (x *PhotoVerifyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bws_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhotoVerifyResponse.ProtoReflect.Descriptor instead.
func (*PhotoVerifyResponse) Descriptor() ([]byte, []int) {
	return file_bws_proto_rawDescGZIP(), []int{3}
}

func (x *PhotoVerifyResponse) GetStatus() JobStatus {
	if x != nil {
		return x.Status
	}
	return JobStatus_SUCCEEDED
}

func (x *PhotoVerifyResponse) GetErrors() []*JobError {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *PhotoVerifyResponse) GetImageProperties() []*ImageProperties {
	if x != nil {
		return x.ImageProperties
	}
	return nil
}

func (x *PhotoVerifyResponse) GetPhotoProperties() *ImageProperties {
	if x != nil {
		return x.PhotoProperties
	}
	return nil
}

func (x *PhotoVerifyResponse) GetVerificationLevel() PhotoVerifyResponse_AccuracyLevel {
	if x != nil {
		return x.VerificationLevel
	}
	return PhotoVerifyResponse_NOT_RECOGNIZED
}

func (x *PhotoVerifyResponse) GetVerificationScore() float64 {
	if x != nil {
		return x.VerificationScore
	}
	return 0
}

func (x *PhotoVerifyResponse) GetLive() bool {
	if x != nil {
		return x.Live
	}
	return false
}

func (x *PhotoVerifyResponse) GetLivenessScore() float64 {
	if x != nil {
		return x.LivenessScore
	}
	return 0
}

// Errors collected with BWS jobs.
type JobError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The error-code identifying the reported error message.
	ErrorCode string `protobuf:"bytes,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	// The error message describing the error.
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *JobError) Reset() {
	*x = JobError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bws_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobError) ProtoMessage() {}

func (x *JobError) ProtoReflect() protoreflect.Message {
	mi := &file_bws_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobError.ProtoReflect.Descriptor instead.
func (*JobError) Descriptor() ([]byte, []int) {
	return file_bws_proto_rawDescGZIP(), []int{4}
}

func (x *JobError) GetErrorCode() string {
	if x != nil {
		return x.ErrorCode
	}
	return ""
}

func (x *JobError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Sample containing an image and some optional tags associated with this image sample.
type ImageData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The image.
	Image []byte `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	// Optional list of tags associated with this image.
	Tags []string `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *ImageData) Reset() {
	*x = ImageData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bws_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageData) ProtoMessage() {}

func (x *ImageData) ProtoReflect() protoreflect.Message {
	mi := &file_bws_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageData.ProtoReflect.Descriptor instead.
func (*ImageData) Descriptor() ([]byte, []int) {
	return file_bws_proto_rawDescGZIP(), []int{5}
}

func (x *ImageData) GetImage() []byte {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *ImageData) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

// Calculated properties from a single input image.
type ImageProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Rotation of the input image.
	// If not 0, the coordinates relate to an image rotated clockwise by this amount of degrees.
	Rotated int32 `protobuf:"varint,1,opt,name=rotated,proto3" json:"rotated,omitempty"`
	// List of faces found in the image.
	Faces []*Face `protobuf:"bytes,2,rep,name=faces,proto3" json:"faces,omitempty"`
	// An optionally calculated quality assessment score.
	QualityScore float64 `protobuf:"fixed64,3,opt,name=quality_score,json=qualityScore,proto3" json:"quality_score,omitempty"`
	// List of quality checks and other checks performed.
	QualityAssessments []*QualityAssessment `protobuf:"bytes,4,rep,name=quality_assessments,json=qualityAssessments,proto3" json:"quality_assessments,omitempty"`
}

func (x *ImageProperties) Reset() {
	*x = ImageProperties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bws_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageProperties) ProtoMessage() {}

func (x *ImageProperties) ProtoReflect() protoreflect.Message {
	mi := &file_bws_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageProperties.ProtoReflect.Descriptor instead.
func (*ImageProperties) Descriptor() ([]byte, []int) {
	return file_bws_proto_rawDescGZIP(), []int{6}
}

func (x *ImageProperties) GetRotated() int32 {
	if x != nil {
		return x.Rotated
	}
	return 0
}

func (x *ImageProperties) GetFaces() []*Face {
	if x != nil {
		return x.Faces
	}
	return nil
}

func (x *ImageProperties) GetQualityScore() float64 {
	if x != nil {
		return x.QualityScore
	}
	return 0
}

func (x *ImageProperties) GetQualityAssessments() []*QualityAssessment {
	if x != nil {
		return x.QualityAssessments
	}
	return nil
}

// Informational messages collected with BWS jobs during processing of an image to give feedback to users.
type QualityAssessment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The quality check performed.
	Check string `protobuf:"bytes,1,opt,name=check,proto3" json:"check,omitempty"`
	// The outcome of the quality check. A score int the range [0.0, 1.0].
	// The higher the value, the better the check was passed.
	Score float64 `protobuf:"fixed64,2,opt,name=score,proto3" json:"score,omitempty"`
	// A text with additional info about this quality assessment.
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *QualityAssessment) Reset() {
	*x = QualityAssessment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bws_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QualityAssessment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QualityAssessment) ProtoMessage() {}

func (x *QualityAssessment) ProtoReflect() protoreflect.Message {
	mi := &file_bws_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QualityAssessment.ProtoReflect.Descriptor instead.
func (*QualityAssessment) Descriptor() ([]byte, []int) {
	return file_bws_proto_rawDescGZIP(), []int{7}
}

func (x *QualityAssessment) GetCheck() string {
	if x != nil {
		return x.Check
	}
	return ""
}

func (x *QualityAssessment) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *QualityAssessment) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Describes some landmarks of a found face within an image together with some optional scores generated by additional DCNNs.
// Important note: It is assumed that the face image is mirrored, i.e. the right eye is on the left side of the image and vice versa!
type Face struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeftEye              *PointD `protobuf:"bytes,2,opt,name=left_eye,json=leftEye,proto3" json:"left_eye,omitempty"`
	RightEye             *PointD `protobuf:"bytes,3,opt,name=right_eye,json=rightEye,proto3" json:"right_eye,omitempty"`
	TextureLivenessScore float64 `protobuf:"fixed64,11,opt,name=texture_liveness_score,json=textureLivenessScore,proto3" json:"texture_liveness_score,omitempty"`
	MotionLivenessScore  float64 `protobuf:"fixed64,12,opt,name=motion_liveness_score,json=motionLivenessScore,proto3" json:"motion_liveness_score,omitempty"`
	MovementDirection    float64 `protobuf:"fixed64,13,opt,name=movement_direction,json=movementDirection,proto3" json:"movement_direction,omitempty"`
}

func (x *Face) Reset() {
	*x = Face{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bws_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Face) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Face) ProtoMessage() {}

func (x *Face) ProtoReflect() protoreflect.Message {
	mi := &file_bws_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Face.ProtoReflect.Descriptor instead.
func (*Face) Descriptor() ([]byte, []int) {
	return file_bws_proto_rawDescGZIP(), []int{8}
}

func (x *Face) GetLeftEye() *PointD {
	if x != nil {
		return x.LeftEye
	}
	return nil
}

func (x *Face) GetRightEye() *PointD {
	if x != nil {
		return x.RightEye
	}
	return nil
}

func (x *Face) GetTextureLivenessScore() float64 {
	if x != nil {
		return x.TextureLivenessScore
	}
	return 0
}

func (x *Face) GetMotionLivenessScore() float64 {
	if x != nil {
		return x.MotionLivenessScore
	}
	return 0
}

func (x *Face) GetMovementDirection() float64 {
	if x != nil {
		return x.MovementDirection
	}
	return 0
}

type PointD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X float64 `protobuf:"fixed64,1,opt,name=x,proto3" json:"x,omitempty"`
	Y float64 `protobuf:"fixed64,2,opt,name=y,proto3" json:"y,omitempty"`
}

func (x *PointD) Reset() {
	*x = PointD{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bws_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PointD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PointD) ProtoMessage() {}

func (x *PointD) ProtoReflect() protoreflect.Message {
	mi := &file_bws_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PointD.ProtoReflect.Descriptor instead.
func (*PointD) Descriptor() ([]byte, []int) {
	return file_bws_proto_rawDescGZIP(), []int{9}
}

func (x *PointD) GetX() float64 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *PointD) GetY() float64 {
	if x != nil {
		return x.Y
	}
	return 0
}

var File_bws_proto protoreflect.FileDescriptor

var file_bws_proto_rawDesc = []byte{
	0x0a, 0x09, 0x62, 0x77, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x62, 0x69, 0x6f,
	0x69, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x22, 0x59,
	0x0a, 0x18, 0x4c, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x0b, 0x6c, 0x69,
	0x76, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x62, 0x69, 0x6f, 0x69, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x6c,
	0x69, 0x76, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x22, 0x90, 0x02, 0x0a, 0x19, 0x4c, 0x69,
	0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x62, 0x69, 0x6f, 0x69, 0x64, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x6f, 0x62, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x33, 0x0a,
	0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x62, 0x69, 0x6f, 0x69, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x4a, 0x6f, 0x62, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x12, 0x4d, 0x0a, 0x10, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62,
	0x69, 0x6f, 0x69, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x52, 0x0f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x04, 0x6c, 0x69, 0x76, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73,
	0x73, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x6c,
	0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0xa7, 0x01, 0x0a,
	0x12, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x0b, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x69, 0x6f, 0x69, 0x64,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x6c, 0x69, 0x76, 0x65, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x3c, 0x0a, 0x1a, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x64, 0x65, 0x74,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x44, 0x65, 0x74,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd3, 0x04, 0x0a, 0x13, 0x50, 0x68, 0x6f, 0x74, 0x6f,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c,
	0x2e, 0x62, 0x69, 0x6f, 0x69, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x33, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x69, 0x6f, 0x69, 0x64, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x6f, 0x62, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x4d, 0x0a, 0x10, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x69, 0x6f, 0x69, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x0f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x10, 0x70, 0x68, 0x6f, 0x74,
	0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x69, 0x6f, 0x69, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x0f, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x63, 0x0a, 0x12, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x62, 0x69, 0x6f, 0x69, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x63, 0x63, 0x75,
	0x72, 0x61, 0x63, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x11, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2d, 0x0a, 0x12,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c,
	0x69, 0x76, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6c, 0x69, 0x76, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x6c, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x6c, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73,
	0x73, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x64, 0x0a, 0x0d, 0x41, 0x63, 0x63, 0x75, 0x72, 0x61,
	0x63, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x4f, 0x54, 0x5f, 0x52,
	0x45, 0x43, 0x4f, 0x47, 0x4e, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4c,
	0x45, 0x56, 0x45, 0x4c, 0x5f, 0x31, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4c, 0x45, 0x56, 0x45,
	0x4c, 0x5f, 0x32, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x33,
	0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x34, 0x10, 0x04, 0x12,
	0x0b, 0x0a, 0x07, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x35, 0x10, 0x05, 0x22, 0x43, 0x0a, 0x08,
	0x4a, 0x6f, 0x62, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x35, 0x0a, 0x09, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0xd6, 0x01, 0x0a, 0x0f, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72,
	0x6f, 0x74, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x05, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x69, 0x6f, 0x69, 0x64, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x61, 0x63, 0x65, 0x52, 0x05,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x55, 0x0a, 0x13, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x69, 0x6f, 0x69, 0x64, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x12, 0x71,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x22, 0x59, 0x0a, 0x11, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x41, 0x73, 0x73, 0x65,
	0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x8d, 0x02, 0x0a,
	0x04, 0x46, 0x61, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x65, 0x79,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x69, 0x6f, 0x69, 0x64, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x44, 0x52, 0x07, 0x6c, 0x65, 0x66, 0x74, 0x45, 0x79, 0x65, 0x12, 0x36, 0x0a, 0x09, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x5f, 0x65, 0x79, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x62, 0x69, 0x6f, 0x69, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x44, 0x52, 0x08, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x45, 0x79, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6c,
	0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x14, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x69, 0x76, 0x65,
	0x6e, 0x65, 0x73, 0x73, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x6d, 0x6f, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x2d, 0x0a,
	0x12, 0x6d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x6d, 0x6f, 0x76, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x24, 0x0a, 0x06,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x44, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x01, 0x79, 0x2a, 0x36, 0x0a, 0x09, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x0d, 0x0a, 0x09, 0x53, 0x55, 0x43, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b,
	0x0a, 0x07, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x43,
	0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x32, 0xdf, 0x01, 0x0a, 0x0f, 0x42,
	0x69, 0x6f, 0x49, 0x44, 0x57, 0x65, 0x62, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6e,
	0x0a, 0x11, 0x4c, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x2e, 0x62, 0x69, 0x6f, 0x69, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73,
	0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2c, 0x2e, 0x62, 0x69, 0x6f, 0x69, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x44, 0x65, 0x74,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c,
	0x0a, 0x0b, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x12, 0x25, 0x2e,
	0x62, 0x69, 0x6f, 0x69, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x62, 0x69, 0x6f, 0x69, 0x64, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x56, 0x5a, 0x54,
	0x44, 0x3a, 0x2f, 0x47, 0x6f, 0x20, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x42,
	0x69, 0x6f, 0x49, 0x44, 0x57, 0x65, 0x62, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x67,
	0x52, 0x50, 0x43, 0x2d, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x2d,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2d, 0x49, 0x6e, 0x2d, 0x47, 0x6f, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x62, 0x69, 0x6f, 0x69, 0x64, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bws_proto_rawDescOnce sync.Once
	file_bws_proto_rawDescData = file_bws_proto_rawDesc
)

func file_bws_proto_rawDescGZIP() []byte {
	file_bws_proto_rawDescOnce.Do(func() {
		file_bws_proto_rawDescData = protoimpl.X.CompressGZIP(file_bws_proto_rawDescData)
	})
	return file_bws_proto_rawDescData
}

var file_bws_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_bws_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_bws_proto_goTypes = []any{
	(JobStatus)(0),                         // 0: bioid.services.v1.JobStatus
	(PhotoVerifyResponse_AccuracyLevel)(0), // 1: bioid.services.v1.PhotoVerifyResponse.AccuracyLevel
	(*LivenessDetectionRequest)(nil),       // 2: bioid.services.v1.LivenessDetectionRequest
	(*LivenessDetectionResponse)(nil),      // 3: bioid.services.v1.LivenessDetectionResponse
	(*PhotoVerifyRequest)(nil),             // 4: bioid.services.v1.PhotoVerifyRequest
	(*PhotoVerifyResponse)(nil),            // 5: bioid.services.v1.PhotoVerifyResponse
	(*JobError)(nil),                       // 6: bioid.services.v1.JobError
	(*ImageData)(nil),                      // 7: bioid.services.v1.ImageData
	(*ImageProperties)(nil),                // 8: bioid.services.v1.ImageProperties
	(*QualityAssessment)(nil),              // 9: bioid.services.v1.QualityAssessment
	(*Face)(nil),                           // 10: bioid.services.v1.Face
	(*PointD)(nil),                         // 11: bioid.services.v1.PointD
}
var file_bws_proto_depIdxs = []int32{
	7,  // 0: bioid.services.v1.LivenessDetectionRequest.live_images:type_name -> bioid.services.v1.ImageData
	0,  // 1: bioid.services.v1.LivenessDetectionResponse.status:type_name -> bioid.services.v1.JobStatus
	6,  // 2: bioid.services.v1.LivenessDetectionResponse.errors:type_name -> bioid.services.v1.JobError
	8,  // 3: bioid.services.v1.LivenessDetectionResponse.image_properties:type_name -> bioid.services.v1.ImageProperties
	7,  // 4: bioid.services.v1.PhotoVerifyRequest.live_images:type_name -> bioid.services.v1.ImageData
	0,  // 5: bioid.services.v1.PhotoVerifyResponse.status:type_name -> bioid.services.v1.JobStatus
	6,  // 6: bioid.services.v1.PhotoVerifyResponse.errors:type_name -> bioid.services.v1.JobError
	8,  // 7: bioid.services.v1.PhotoVerifyResponse.image_properties:type_name -> bioid.services.v1.ImageProperties
	8,  // 8: bioid.services.v1.PhotoVerifyResponse.photo_properties:type_name -> bioid.services.v1.ImageProperties
	1,  // 9: bioid.services.v1.PhotoVerifyResponse.verification_level:type_name -> bioid.services.v1.PhotoVerifyResponse.AccuracyLevel
	10, // 10: bioid.services.v1.ImageProperties.faces:type_name -> bioid.services.v1.Face
	9,  // 11: bioid.services.v1.ImageProperties.quality_assessments:type_name -> bioid.services.v1.QualityAssessment
	11, // 12: bioid.services.v1.Face.left_eye:type_name -> bioid.services.v1.PointD
	11, // 13: bioid.services.v1.Face.right_eye:type_name -> bioid.services.v1.PointD
	2,  // 14: bioid.services.v1.BioIDWebService.LivenessDetection:input_type -> bioid.services.v1.LivenessDetectionRequest
	4,  // 15: bioid.services.v1.BioIDWebService.PhotoVerify:input_type -> bioid.services.v1.PhotoVerifyRequest
	3,  // 16: bioid.services.v1.BioIDWebService.LivenessDetection:output_type -> bioid.services.v1.LivenessDetectionResponse
	5,  // 17: bioid.services.v1.BioIDWebService.PhotoVerify:output_type -> bioid.services.v1.PhotoVerifyResponse
	16, // [16:18] is the sub-list for method output_type
	14, // [14:16] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_bws_proto_init() }
func file_bws_proto_init() {
	if File_bws_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_bws_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*LivenessDetectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bws_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*LivenessDetectionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bws_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*PhotoVerifyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bws_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*PhotoVerifyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bws_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*JobError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bws_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*ImageData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bws_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*ImageProperties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bws_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*QualityAssessment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bws_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*Face); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bws_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*PointD); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bws_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_bws_proto_goTypes,
		DependencyIndexes: file_bws_proto_depIdxs,
		EnumInfos:         file_bws_proto_enumTypes,
		MessageInfos:      file_bws_proto_msgTypes,
	}.Build()
	File_bws_proto = out.File
	file_bws_proto_rawDesc = nil
	file_bws_proto_goTypes = nil
	file_bws_proto_depIdxs = nil
}
