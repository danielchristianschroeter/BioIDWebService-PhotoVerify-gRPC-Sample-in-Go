// Copyright 2024 BioID GmbH.
// Specification of the BioID Web Service (BWS) API.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.2
// source: bws.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	BioIDWebService_LivenessDetection_FullMethodName = "/bioid.services.v1.BioIDWebService/LivenessDetection"
	BioIDWebService_PhotoVerify_FullMethodName       = "/bioid.services.v1.BioIDWebService/PhotoVerify"
)

// BioIDWebServiceClient is the client API for BioIDWebService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// BioID Web Service definition.
type BioIDWebServiceClient interface {
	// Liveness-detection API
	// - 1 image: passive liveness detection only
	// - 2 images: passive and active liveness detection
	// - 2 images and tags: active liveness detection with challenge response
	LivenessDetection(ctx context.Context, in *LivenessDetectionRequest, opts ...grpc.CallOption) (*LivenessDetectionResponse, error)
	// Photo-verification API
	PhotoVerify(ctx context.Context, in *PhotoVerifyRequest, opts ...grpc.CallOption) (*PhotoVerifyResponse, error)
}

type bioIDWebServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBioIDWebServiceClient(cc grpc.ClientConnInterface) BioIDWebServiceClient {
	return &bioIDWebServiceClient{cc}
}

func (c *bioIDWebServiceClient) LivenessDetection(ctx context.Context, in *LivenessDetectionRequest, opts ...grpc.CallOption) (*LivenessDetectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LivenessDetectionResponse)
	err := c.cc.Invoke(ctx, BioIDWebService_LivenessDetection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bioIDWebServiceClient) PhotoVerify(ctx context.Context, in *PhotoVerifyRequest, opts ...grpc.CallOption) (*PhotoVerifyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PhotoVerifyResponse)
	err := c.cc.Invoke(ctx, BioIDWebService_PhotoVerify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BioIDWebServiceServer is the server API for BioIDWebService service.
// All implementations must embed UnimplementedBioIDWebServiceServer
// for forward compatibility
//
// BioID Web Service definition.
type BioIDWebServiceServer interface {
	// Liveness-detection API
	// - 1 image: passive liveness detection only
	// - 2 images: passive and active liveness detection
	// - 2 images and tags: active liveness detection with challenge response
	LivenessDetection(context.Context, *LivenessDetectionRequest) (*LivenessDetectionResponse, error)
	// Photo-verification API
	PhotoVerify(context.Context, *PhotoVerifyRequest) (*PhotoVerifyResponse, error)
	mustEmbedUnimplementedBioIDWebServiceServer()
}

// UnimplementedBioIDWebServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBioIDWebServiceServer struct {
}

func (UnimplementedBioIDWebServiceServer) LivenessDetection(context.Context, *LivenessDetectionRequest) (*LivenessDetectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LivenessDetection not implemented")
}
func (UnimplementedBioIDWebServiceServer) PhotoVerify(context.Context, *PhotoVerifyRequest) (*PhotoVerifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhotoVerify not implemented")
}
func (UnimplementedBioIDWebServiceServer) mustEmbedUnimplementedBioIDWebServiceServer() {}

// UnsafeBioIDWebServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BioIDWebServiceServer will
// result in compilation errors.
type UnsafeBioIDWebServiceServer interface {
	mustEmbedUnimplementedBioIDWebServiceServer()
}

func RegisterBioIDWebServiceServer(s grpc.ServiceRegistrar, srv BioIDWebServiceServer) {
	s.RegisterService(&BioIDWebService_ServiceDesc, srv)
}

func _BioIDWebService_LivenessDetection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LivenessDetectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BioIDWebServiceServer).LivenessDetection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BioIDWebService_LivenessDetection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BioIDWebServiceServer).LivenessDetection(ctx, req.(*LivenessDetectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BioIDWebService_PhotoVerify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PhotoVerifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BioIDWebServiceServer).PhotoVerify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BioIDWebService_PhotoVerify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BioIDWebServiceServer).PhotoVerify(ctx, req.(*PhotoVerifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BioIDWebService_ServiceDesc is the grpc.ServiceDesc for BioIDWebService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BioIDWebService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bioid.services.v1.BioIDWebService",
	HandlerType: (*BioIDWebServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LivenessDetection",
			Handler:    _BioIDWebService_LivenessDetection_Handler,
		},
		{
			MethodName: "PhotoVerify",
			Handler:    _BioIDWebService_PhotoVerify_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bws.proto",
}
